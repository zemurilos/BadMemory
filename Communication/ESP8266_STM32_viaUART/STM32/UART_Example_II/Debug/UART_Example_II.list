
UART_Example_II.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000157c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001688  08001688  00011688  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080016d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e4  2000000c  080016e4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000f0  080016e4  000200f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000110a5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000230e  00000000  00000000  000310da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006014  00000000  00000000  000333e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000878  00000000  00000000  00039400  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b38  00000000  00000000  00039c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004d19  00000000  00000000  0003a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003451  00000000  00000000  0003f4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004291a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001884  00000000  00000000  00042998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001670 	.word	0x08001670

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001670 	.word	0x08001670

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 f944 	bl	8001448 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000028 	.word	0x20000028

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80002e0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80002e2:	b330      	cbz	r0, 8000332 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002e4:	2214      	movs	r2, #20
 80002e6:	6801      	ldr	r1, [r0, #0]
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80002ea:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80002ec:	440b      	add	r3, r1
 80002ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80002f8:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80002fa:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80002fc:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80002fe:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000302:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000304:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000306:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800030a:	4323      	orrs	r3, r4
 800030c:	6904      	ldr	r4, [r0, #16]
 800030e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000310:	6944      	ldr	r4, [r0, #20]
 8000312:	4323      	orrs	r3, r4
 8000314:	6984      	ldr	r4, [r0, #24]
 8000316:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000318:	69c4      	ldr	r4, [r0, #28]
 800031a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800031c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800031e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000320:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000322:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000324:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000328:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800032a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800032e:	4618      	mov	r0, r3
 8000330:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000332:	2001      	movs	r0, #1
}
 8000334:	bd10      	pop	{r4, pc}
 8000336:	bf00      	nop
 8000338:	bffdfff8 	.word	0xbffdfff8
 800033c:	40020000 	.word	0x40020000

08000340 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000340:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000342:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000346:	2c01      	cmp	r4, #1
 8000348:	d035      	beq.n	80003b6 <HAL_DMA_Start_IT+0x76>
 800034a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800034c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000350:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000354:	42a5      	cmp	r5, r4
 8000356:	f04f 0600 	mov.w	r6, #0
 800035a:	f04f 0402 	mov.w	r4, #2
 800035e:	d128      	bne.n	80003b2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000360:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000364:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000366:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000368:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800036a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800036c:	f026 0601 	bic.w	r6, r6, #1
 8000370:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000372:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000374:	40bd      	lsls	r5, r7
 8000376:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000378:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800037a:	6843      	ldr	r3, [r0, #4]
 800037c:	6805      	ldr	r5, [r0, #0]
 800037e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000380:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000382:	bf0b      	itete	eq
 8000384:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000386:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000388:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800038a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800038c:	b14b      	cbz	r3, 80003a2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800038e:	6823      	ldr	r3, [r4, #0]
 8000390:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000394:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000396:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000398:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	602b      	str	r3, [r5, #0]
 80003a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80003a2:	6823      	ldr	r3, [r4, #0]
 80003a4:	f023 0304 	bic.w	r3, r3, #4
 80003a8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80003aa:	6823      	ldr	r3, [r4, #0]
 80003ac:	f043 030a 	orr.w	r3, r3, #10
 80003b0:	e7f0      	b.n	8000394 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80003b2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80003b6:	2002      	movs	r0, #2
}
 80003b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003bc <HAL_DMA_IRQHandler>:
{
 80003bc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003be:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80003c0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80003c4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80003c6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003c8:	4095      	lsls	r5, r2
 80003ca:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80003cc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003ce:	d032      	beq.n	8000436 <HAL_DMA_IRQHandler+0x7a>
 80003d0:	074d      	lsls	r5, r1, #29
 80003d2:	d530      	bpl.n	8000436 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80003d8:	bf5e      	ittt	pl
 80003da:	681a      	ldrpl	r2, [r3, #0]
 80003dc:	f022 0204 	bicpl.w	r2, r2, #4
 80003e0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80003e2:	4a3e      	ldr	r2, [pc, #248]	; (80004dc <HAL_DMA_IRQHandler+0x120>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d019      	beq.n	800041c <HAL_DMA_IRQHandler+0x60>
 80003e8:	3214      	adds	r2, #20
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d018      	beq.n	8000420 <HAL_DMA_IRQHandler+0x64>
 80003ee:	3214      	adds	r2, #20
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d017      	beq.n	8000424 <HAL_DMA_IRQHandler+0x68>
 80003f4:	3214      	adds	r2, #20
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d017      	beq.n	800042a <HAL_DMA_IRQHandler+0x6e>
 80003fa:	3214      	adds	r2, #20
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d017      	beq.n	8000430 <HAL_DMA_IRQHandler+0x74>
 8000400:	3214      	adds	r2, #20
 8000402:	4293      	cmp	r3, r2
 8000404:	bf0c      	ite	eq
 8000406:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800040a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800040e:	4a34      	ldr	r2, [pc, #208]	; (80004e0 <HAL_DMA_IRQHandler+0x124>)
 8000410:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000412:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000414:	2b00      	cmp	r3, #0
 8000416:	d05e      	beq.n	80004d6 <HAL_DMA_IRQHandler+0x11a>
}
 8000418:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800041a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800041c:	2304      	movs	r3, #4
 800041e:	e7f6      	b.n	800040e <HAL_DMA_IRQHandler+0x52>
 8000420:	2340      	movs	r3, #64	; 0x40
 8000422:	e7f4      	b.n	800040e <HAL_DMA_IRQHandler+0x52>
 8000424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000428:	e7f1      	b.n	800040e <HAL_DMA_IRQHandler+0x52>
 800042a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800042e:	e7ee      	b.n	800040e <HAL_DMA_IRQHandler+0x52>
 8000430:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000434:	e7eb      	b.n	800040e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000436:	2502      	movs	r5, #2
 8000438:	4095      	lsls	r5, r2
 800043a:	4225      	tst	r5, r4
 800043c:	d035      	beq.n	80004aa <HAL_DMA_IRQHandler+0xee>
 800043e:	078d      	lsls	r5, r1, #30
 8000440:	d533      	bpl.n	80004aa <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	0694      	lsls	r4, r2, #26
 8000446:	d406      	bmi.n	8000456 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	f022 020a 	bic.w	r2, r2, #10
 800044e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000450:	2201      	movs	r2, #1
 8000452:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000456:	4a21      	ldr	r2, [pc, #132]	; (80004dc <HAL_DMA_IRQHandler+0x120>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d019      	beq.n	8000490 <HAL_DMA_IRQHandler+0xd4>
 800045c:	3214      	adds	r2, #20
 800045e:	4293      	cmp	r3, r2
 8000460:	d018      	beq.n	8000494 <HAL_DMA_IRQHandler+0xd8>
 8000462:	3214      	adds	r2, #20
 8000464:	4293      	cmp	r3, r2
 8000466:	d017      	beq.n	8000498 <HAL_DMA_IRQHandler+0xdc>
 8000468:	3214      	adds	r2, #20
 800046a:	4293      	cmp	r3, r2
 800046c:	d017      	beq.n	800049e <HAL_DMA_IRQHandler+0xe2>
 800046e:	3214      	adds	r2, #20
 8000470:	4293      	cmp	r3, r2
 8000472:	d017      	beq.n	80004a4 <HAL_DMA_IRQHandler+0xe8>
 8000474:	3214      	adds	r2, #20
 8000476:	4293      	cmp	r3, r2
 8000478:	bf0c      	ite	eq
 800047a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800047e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <HAL_DMA_IRQHandler+0x124>)
 8000484:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000486:	2300      	movs	r3, #0
 8000488:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800048c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800048e:	e7c1      	b.n	8000414 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000490:	2302      	movs	r3, #2
 8000492:	e7f6      	b.n	8000482 <HAL_DMA_IRQHandler+0xc6>
 8000494:	2320      	movs	r3, #32
 8000496:	e7f4      	b.n	8000482 <HAL_DMA_IRQHandler+0xc6>
 8000498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800049c:	e7f1      	b.n	8000482 <HAL_DMA_IRQHandler+0xc6>
 800049e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a2:	e7ee      	b.n	8000482 <HAL_DMA_IRQHandler+0xc6>
 80004a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004a8:	e7eb      	b.n	8000482 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80004aa:	2508      	movs	r5, #8
 80004ac:	4095      	lsls	r5, r2
 80004ae:	4225      	tst	r5, r4
 80004b0:	d011      	beq.n	80004d6 <HAL_DMA_IRQHandler+0x11a>
 80004b2:	0709      	lsls	r1, r1, #28
 80004b4:	d50f      	bpl.n	80004d6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004b6:	6819      	ldr	r1, [r3, #0]
 80004b8:	f021 010e 	bic.w	r1, r1, #14
 80004bc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80004be:	2301      	movs	r3, #1
 80004c0:	fa03 f202 	lsl.w	r2, r3, r2
 80004c4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80004c6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80004c8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80004cc:	2300      	movs	r3, #0
 80004ce:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80004d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004d4:	e79e      	b.n	8000414 <HAL_DMA_IRQHandler+0x58>
}
 80004d6:	bc70      	pop	{r4, r5, r6}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40020008 	.word	0x40020008
 80004e0:	40020000 	.word	0x40020000

080004e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80004e8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004ea:	4616      	mov	r6, r2
 80004ec:	4b65      	ldr	r3, [pc, #404]	; (8000684 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004ee:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000694 <HAL_GPIO_Init+0x1b0>
 80004f2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000698 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80004f6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004fa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80004fc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000500:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000504:	45a0      	cmp	r8, r4
 8000506:	d17f      	bne.n	8000608 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000508:	684d      	ldr	r5, [r1, #4]
 800050a:	2d12      	cmp	r5, #18
 800050c:	f000 80af 	beq.w	800066e <HAL_GPIO_Init+0x18a>
 8000510:	f200 8088 	bhi.w	8000624 <HAL_GPIO_Init+0x140>
 8000514:	2d02      	cmp	r5, #2
 8000516:	f000 80a7 	beq.w	8000668 <HAL_GPIO_Init+0x184>
 800051a:	d87c      	bhi.n	8000616 <HAL_GPIO_Init+0x132>
 800051c:	2d00      	cmp	r5, #0
 800051e:	f000 808e 	beq.w	800063e <HAL_GPIO_Init+0x15a>
 8000522:	2d01      	cmp	r5, #1
 8000524:	f000 809e 	beq.w	8000664 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000528:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800052c:	2cff      	cmp	r4, #255	; 0xff
 800052e:	bf93      	iteet	ls
 8000530:	4682      	movls	sl, r0
 8000532:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000536:	3d08      	subhi	r5, #8
 8000538:	f8d0 b000 	ldrls.w	fp, [r0]
 800053c:	bf92      	itee	ls
 800053e:	00b5      	lslls	r5, r6, #2
 8000540:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000544:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000546:	fa09 f805 	lsl.w	r8, r9, r5
 800054a:	ea2b 0808 	bic.w	r8, fp, r8
 800054e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	bf88      	it	hi
 8000554:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000558:	ea48 0505 	orr.w	r5, r8, r5
 800055c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000560:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000564:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000568:	d04e      	beq.n	8000608 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4d47      	ldr	r5, [pc, #284]	; (8000688 <HAL_GPIO_Init+0x1a4>)
 800056c:	4f46      	ldr	r7, [pc, #280]	; (8000688 <HAL_GPIO_Init+0x1a4>)
 800056e:	69ad      	ldr	r5, [r5, #24]
 8000570:	f026 0803 	bic.w	r8, r6, #3
 8000574:	f045 0501 	orr.w	r5, r5, #1
 8000578:	61bd      	str	r5, [r7, #24]
 800057a:	69bd      	ldr	r5, [r7, #24]
 800057c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000580:	f005 0501 	and.w	r5, r5, #1
 8000584:	9501      	str	r5, [sp, #4]
 8000586:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800058a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000590:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000594:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000598:	fa09 f90b 	lsl.w	r9, r9, fp
 800059c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005a0:	4d3a      	ldr	r5, [pc, #232]	; (800068c <HAL_GPIO_Init+0x1a8>)
 80005a2:	42a8      	cmp	r0, r5
 80005a4:	d068      	beq.n	8000678 <HAL_GPIO_Init+0x194>
 80005a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005aa:	42a8      	cmp	r0, r5
 80005ac:	d066      	beq.n	800067c <HAL_GPIO_Init+0x198>
 80005ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005b2:	42a8      	cmp	r0, r5
 80005b4:	d064      	beq.n	8000680 <HAL_GPIO_Init+0x19c>
 80005b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ba:	42a8      	cmp	r0, r5
 80005bc:	bf0c      	ite	eq
 80005be:	2503      	moveq	r5, #3
 80005c0:	2504      	movne	r5, #4
 80005c2:	fa05 f50b 	lsl.w	r5, r5, fp
 80005c6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80005ca:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005ce:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005d0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005d4:	bf14      	ite	ne
 80005d6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005d8:	43a5      	biceq	r5, r4
 80005da:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005dc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005de:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005e2:	bf14      	ite	ne
 80005e4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005e6:	43a5      	biceq	r5, r4
 80005e8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005ea:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005ec:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f0:	bf14      	ite	ne
 80005f2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005f4:	43a5      	biceq	r5, r4
 80005f6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80005f8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005fa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80005fe:	bf14      	ite	ne
 8000600:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000602:	ea25 0404 	biceq.w	r4, r5, r4
 8000606:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000608:	3601      	adds	r6, #1
 800060a:	2e10      	cmp	r6, #16
 800060c:	f47f af73 	bne.w	80004f6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000610:	b003      	add	sp, #12
 8000612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000616:	2d03      	cmp	r5, #3
 8000618:	d022      	beq.n	8000660 <HAL_GPIO_Init+0x17c>
 800061a:	2d11      	cmp	r5, #17
 800061c:	d184      	bne.n	8000528 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800061e:	68ca      	ldr	r2, [r1, #12]
 8000620:	3204      	adds	r2, #4
          break;
 8000622:	e781      	b.n	8000528 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000624:	4f1a      	ldr	r7, [pc, #104]	; (8000690 <HAL_GPIO_Init+0x1ac>)
 8000626:	42bd      	cmp	r5, r7
 8000628:	d009      	beq.n	800063e <HAL_GPIO_Init+0x15a>
 800062a:	d812      	bhi.n	8000652 <HAL_GPIO_Init+0x16e>
 800062c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800069c <HAL_GPIO_Init+0x1b8>
 8000630:	454d      	cmp	r5, r9
 8000632:	d004      	beq.n	800063e <HAL_GPIO_Init+0x15a>
 8000634:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000638:	454d      	cmp	r5, r9
 800063a:	f47f af75 	bne.w	8000528 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800063e:	688a      	ldr	r2, [r1, #8]
 8000640:	b1c2      	cbz	r2, 8000674 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000642:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000644:	bf0c      	ite	eq
 8000646:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800064a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800064e:	2208      	movs	r2, #8
 8000650:	e76a      	b.n	8000528 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000652:	4575      	cmp	r5, lr
 8000654:	d0f3      	beq.n	800063e <HAL_GPIO_Init+0x15a>
 8000656:	4565      	cmp	r5, ip
 8000658:	d0f1      	beq.n	800063e <HAL_GPIO_Init+0x15a>
 800065a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006a0 <HAL_GPIO_Init+0x1bc>
 800065e:	e7eb      	b.n	8000638 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000660:	2200      	movs	r2, #0
 8000662:	e761      	b.n	8000528 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000664:	68ca      	ldr	r2, [r1, #12]
          break;
 8000666:	e75f      	b.n	8000528 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000668:	68ca      	ldr	r2, [r1, #12]
 800066a:	3208      	adds	r2, #8
          break;
 800066c:	e75c      	b.n	8000528 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800066e:	68ca      	ldr	r2, [r1, #12]
 8000670:	320c      	adds	r2, #12
          break;
 8000672:	e759      	b.n	8000528 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000674:	2204      	movs	r2, #4
 8000676:	e757      	b.n	8000528 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000678:	2500      	movs	r5, #0
 800067a:	e7a2      	b.n	80005c2 <HAL_GPIO_Init+0xde>
 800067c:	2501      	movs	r5, #1
 800067e:	e7a0      	b.n	80005c2 <HAL_GPIO_Init+0xde>
 8000680:	2502      	movs	r5, #2
 8000682:	e79e      	b.n	80005c2 <HAL_GPIO_Init+0xde>
 8000684:	40010400 	.word	0x40010400
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800
 8000690:	10210000 	.word	0x10210000
 8000694:	10310000 	.word	0x10310000
 8000698:	10320000 	.word	0x10320000
 800069c:	10110000 	.word	0x10110000
 80006a0:	10220000 	.word	0x10220000

080006a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006a4:	b10a      	cbz	r2, 80006aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006a6:	6101      	str	r1, [r0, #16]
 80006a8:	4770      	bx	lr
 80006aa:	0409      	lsls	r1, r1, #16
 80006ac:	e7fb      	b.n	80006a6 <HAL_GPIO_WritePin+0x2>

080006ae <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80006ae:	68c3      	ldr	r3, [r0, #12]
 80006b0:	4059      	eors	r1, r3
 80006b2:	60c1      	str	r1, [r0, #12]
 80006b4:	4770      	bx	lr

080006b6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006b6:	4770      	bx	lr

080006b8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80006b8:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80006bc:	6959      	ldr	r1, [r3, #20]
 80006be:	4201      	tst	r1, r0
 80006c0:	d002      	beq.n	80006c8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80006c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80006c4:	f7ff fff7 	bl	80006b6 <HAL_GPIO_EXTI_Callback>
 80006c8:	bd08      	pop	{r3, pc}
 80006ca:	bf00      	nop
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006d0:	6803      	ldr	r3, [r0, #0]
{
 80006d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006d6:	07db      	lsls	r3, r3, #31
{
 80006d8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006da:	d410      	bmi.n	80006fe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006dc:	682b      	ldr	r3, [r5, #0]
 80006de:	079f      	lsls	r7, r3, #30
 80006e0:	d45e      	bmi.n	80007a0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006e2:	682b      	ldr	r3, [r5, #0]
 80006e4:	0719      	lsls	r1, r3, #28
 80006e6:	f100 8095 	bmi.w	8000814 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006ea:	682b      	ldr	r3, [r5, #0]
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	f100 80bf 	bmi.w	8000870 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006f2:	69ea      	ldr	r2, [r5, #28]
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	f040 812d 	bne.w	8000954 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80006fa:	2000      	movs	r0, #0
 80006fc:	e014      	b.n	8000728 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006fe:	4c90      	ldr	r4, [pc, #576]	; (8000940 <HAL_RCC_OscConfig+0x270>)
 8000700:	6863      	ldr	r3, [r4, #4]
 8000702:	f003 030c 	and.w	r3, r3, #12
 8000706:	2b04      	cmp	r3, #4
 8000708:	d007      	beq.n	800071a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800070a:	6863      	ldr	r3, [r4, #4]
 800070c:	f003 030c 	and.w	r3, r3, #12
 8000710:	2b08      	cmp	r3, #8
 8000712:	d10c      	bne.n	800072e <HAL_RCC_OscConfig+0x5e>
 8000714:	6863      	ldr	r3, [r4, #4]
 8000716:	03de      	lsls	r6, r3, #15
 8000718:	d509      	bpl.n	800072e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	039c      	lsls	r4, r3, #14
 800071e:	d5dd      	bpl.n	80006dc <HAL_RCC_OscConfig+0xc>
 8000720:	686b      	ldr	r3, [r5, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1da      	bne.n	80006dc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000726:	2001      	movs	r0, #1
}
 8000728:	b002      	add	sp, #8
 800072a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800072e:	686b      	ldr	r3, [r5, #4]
 8000730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000734:	d110      	bne.n	8000758 <HAL_RCC_OscConfig+0x88>
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800073c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800073e:	f7ff fd4f 	bl	80001e0 <HAL_GetTick>
 8000742:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	0398      	lsls	r0, r3, #14
 8000748:	d4c8      	bmi.n	80006dc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800074a:	f7ff fd49 	bl	80001e0 <HAL_GetTick>
 800074e:	1b80      	subs	r0, r0, r6
 8000750:	2864      	cmp	r0, #100	; 0x64
 8000752:	d9f7      	bls.n	8000744 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000754:	2003      	movs	r0, #3
 8000756:	e7e7      	b.n	8000728 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000758:	b99b      	cbnz	r3, 8000782 <HAL_RCC_OscConfig+0xb2>
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000760:	6023      	str	r3, [r4, #0]
 8000762:	6823      	ldr	r3, [r4, #0]
 8000764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000768:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800076a:	f7ff fd39 	bl	80001e0 <HAL_GetTick>
 800076e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	0399      	lsls	r1, r3, #14
 8000774:	d5b2      	bpl.n	80006dc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000776:	f7ff fd33 	bl	80001e0 <HAL_GetTick>
 800077a:	1b80      	subs	r0, r0, r6
 800077c:	2864      	cmp	r0, #100	; 0x64
 800077e:	d9f7      	bls.n	8000770 <HAL_RCC_OscConfig+0xa0>
 8000780:	e7e8      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	d103      	bne.n	8000792 <HAL_RCC_OscConfig+0xc2>
 800078a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078e:	6023      	str	r3, [r4, #0]
 8000790:	e7d1      	b.n	8000736 <HAL_RCC_OscConfig+0x66>
 8000792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000796:	6023      	str	r3, [r4, #0]
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079e:	e7cd      	b.n	800073c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007a0:	4c67      	ldr	r4, [pc, #412]	; (8000940 <HAL_RCC_OscConfig+0x270>)
 80007a2:	6863      	ldr	r3, [r4, #4]
 80007a4:	f013 0f0c 	tst.w	r3, #12
 80007a8:	d007      	beq.n	80007ba <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007aa:	6863      	ldr	r3, [r4, #4]
 80007ac:	f003 030c 	and.w	r3, r3, #12
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d110      	bne.n	80007d6 <HAL_RCC_OscConfig+0x106>
 80007b4:	6863      	ldr	r3, [r4, #4]
 80007b6:	03da      	lsls	r2, r3, #15
 80007b8:	d40d      	bmi.n	80007d6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	079b      	lsls	r3, r3, #30
 80007be:	d502      	bpl.n	80007c6 <HAL_RCC_OscConfig+0xf6>
 80007c0:	692b      	ldr	r3, [r5, #16]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d1af      	bne.n	8000726 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	696a      	ldr	r2, [r5, #20]
 80007ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007d2:	6023      	str	r3, [r4, #0]
 80007d4:	e785      	b.n	80006e2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007d6:	692a      	ldr	r2, [r5, #16]
 80007d8:	4b5a      	ldr	r3, [pc, #360]	; (8000944 <HAL_RCC_OscConfig+0x274>)
 80007da:	b16a      	cbz	r2, 80007f8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007e0:	f7ff fcfe 	bl	80001e0 <HAL_GetTick>
 80007e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	079f      	lsls	r7, r3, #30
 80007ea:	d4ec      	bmi.n	80007c6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007ec:	f7ff fcf8 	bl	80001e0 <HAL_GetTick>
 80007f0:	1b80      	subs	r0, r0, r6
 80007f2:	2802      	cmp	r0, #2
 80007f4:	d9f7      	bls.n	80007e6 <HAL_RCC_OscConfig+0x116>
 80007f6:	e7ad      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80007f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007fa:	f7ff fcf1 	bl	80001e0 <HAL_GetTick>
 80007fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	0798      	lsls	r0, r3, #30
 8000804:	f57f af6d 	bpl.w	80006e2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000808:	f7ff fcea 	bl	80001e0 <HAL_GetTick>
 800080c:	1b80      	subs	r0, r0, r6
 800080e:	2802      	cmp	r0, #2
 8000810:	d9f6      	bls.n	8000800 <HAL_RCC_OscConfig+0x130>
 8000812:	e79f      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000814:	69aa      	ldr	r2, [r5, #24]
 8000816:	4c4a      	ldr	r4, [pc, #296]	; (8000940 <HAL_RCC_OscConfig+0x270>)
 8000818:	4b4b      	ldr	r3, [pc, #300]	; (8000948 <HAL_RCC_OscConfig+0x278>)
 800081a:	b1da      	cbz	r2, 8000854 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000820:	f7ff fcde 	bl	80001e0 <HAL_GetTick>
 8000824:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000828:	079b      	lsls	r3, r3, #30
 800082a:	d50d      	bpl.n	8000848 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800082c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000830:	4b46      	ldr	r3, [pc, #280]	; (800094c <HAL_RCC_OscConfig+0x27c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	fbb3 f3f2 	udiv	r3, r3, r2
 8000838:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800083a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800083c:	9b01      	ldr	r3, [sp, #4]
 800083e:	1e5a      	subs	r2, r3, #1
 8000840:	9201      	str	r2, [sp, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f9      	bne.n	800083a <HAL_RCC_OscConfig+0x16a>
 8000846:	e750      	b.n	80006ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000848:	f7ff fcca 	bl	80001e0 <HAL_GetTick>
 800084c:	1b80      	subs	r0, r0, r6
 800084e:	2802      	cmp	r0, #2
 8000850:	d9e9      	bls.n	8000826 <HAL_RCC_OscConfig+0x156>
 8000852:	e77f      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000854:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000856:	f7ff fcc3 	bl	80001e0 <HAL_GetTick>
 800085a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800085c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800085e:	079f      	lsls	r7, r3, #30
 8000860:	f57f af43 	bpl.w	80006ea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000864:	f7ff fcbc 	bl	80001e0 <HAL_GetTick>
 8000868:	1b80      	subs	r0, r0, r6
 800086a:	2802      	cmp	r0, #2
 800086c:	d9f6      	bls.n	800085c <HAL_RCC_OscConfig+0x18c>
 800086e:	e771      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000870:	4c33      	ldr	r4, [pc, #204]	; (8000940 <HAL_RCC_OscConfig+0x270>)
 8000872:	69e3      	ldr	r3, [r4, #28]
 8000874:	00d8      	lsls	r0, r3, #3
 8000876:	d424      	bmi.n	80008c2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000878:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	69e3      	ldr	r3, [r4, #28]
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	61e3      	str	r3, [r4, #28]
 8000882:	69e3      	ldr	r3, [r4, #28]
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800088c:	4e30      	ldr	r6, [pc, #192]	; (8000950 <HAL_RCC_OscConfig+0x280>)
 800088e:	6833      	ldr	r3, [r6, #0]
 8000890:	05d9      	lsls	r1, r3, #23
 8000892:	d518      	bpl.n	80008c6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000894:	68eb      	ldr	r3, [r5, #12]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d126      	bne.n	80008e8 <HAL_RCC_OscConfig+0x218>
 800089a:	6a23      	ldr	r3, [r4, #32]
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008a2:	f7ff fc9d 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008a6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80008aa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ac:	6a23      	ldr	r3, [r4, #32]
 80008ae:	079b      	lsls	r3, r3, #30
 80008b0:	d53f      	bpl.n	8000932 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80008b2:	2f00      	cmp	r7, #0
 80008b4:	f43f af1d 	beq.w	80006f2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008b8:	69e3      	ldr	r3, [r4, #28]
 80008ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008be:	61e3      	str	r3, [r4, #28]
 80008c0:	e717      	b.n	80006f2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80008c2:	2700      	movs	r7, #0
 80008c4:	e7e2      	b.n	800088c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008c6:	6833      	ldr	r3, [r6, #0]
 80008c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80008ce:	f7ff fc87 	bl	80001e0 <HAL_GetTick>
 80008d2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008d4:	6833      	ldr	r3, [r6, #0]
 80008d6:	05da      	lsls	r2, r3, #23
 80008d8:	d4dc      	bmi.n	8000894 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008da:	f7ff fc81 	bl	80001e0 <HAL_GetTick>
 80008de:	eba0 0008 	sub.w	r0, r0, r8
 80008e2:	2864      	cmp	r0, #100	; 0x64
 80008e4:	d9f6      	bls.n	80008d4 <HAL_RCC_OscConfig+0x204>
 80008e6:	e735      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008e8:	b9ab      	cbnz	r3, 8000916 <HAL_RCC_OscConfig+0x246>
 80008ea:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	6223      	str	r3, [r4, #32]
 80008f6:	6a23      	ldr	r3, [r4, #32]
 80008f8:	f023 0304 	bic.w	r3, r3, #4
 80008fc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008fe:	f7ff fc6f 	bl	80001e0 <HAL_GetTick>
 8000902:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000904:	6a23      	ldr	r3, [r4, #32]
 8000906:	0798      	lsls	r0, r3, #30
 8000908:	d5d3      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800090a:	f7ff fc69 	bl	80001e0 <HAL_GetTick>
 800090e:	1b80      	subs	r0, r0, r6
 8000910:	4540      	cmp	r0, r8
 8000912:	d9f7      	bls.n	8000904 <HAL_RCC_OscConfig+0x234>
 8000914:	e71e      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000916:	2b05      	cmp	r3, #5
 8000918:	6a23      	ldr	r3, [r4, #32]
 800091a:	d103      	bne.n	8000924 <HAL_RCC_OscConfig+0x254>
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6223      	str	r3, [r4, #32]
 8000922:	e7ba      	b.n	800089a <HAL_RCC_OscConfig+0x1ca>
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	6223      	str	r3, [r4, #32]
 800092a:	6a23      	ldr	r3, [r4, #32]
 800092c:	f023 0304 	bic.w	r3, r3, #4
 8000930:	e7b6      	b.n	80008a0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000932:	f7ff fc55 	bl	80001e0 <HAL_GetTick>
 8000936:	eba0 0008 	sub.w	r0, r0, r8
 800093a:	42b0      	cmp	r0, r6
 800093c:	d9b6      	bls.n	80008ac <HAL_RCC_OscConfig+0x1dc>
 800093e:	e709      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
 8000940:	40021000 	.word	0x40021000
 8000944:	42420000 	.word	0x42420000
 8000948:	42420480 	.word	0x42420480
 800094c:	20000008 	.word	0x20000008
 8000950:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000954:	4c22      	ldr	r4, [pc, #136]	; (80009e0 <HAL_RCC_OscConfig+0x310>)
 8000956:	6863      	ldr	r3, [r4, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	2b08      	cmp	r3, #8
 800095e:	f43f aee2 	beq.w	8000726 <HAL_RCC_OscConfig+0x56>
 8000962:	2300      	movs	r3, #0
 8000964:	4e1f      	ldr	r6, [pc, #124]	; (80009e4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000966:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000968:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800096a:	d12b      	bne.n	80009c4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800096c:	f7ff fc38 	bl	80001e0 <HAL_GetTick>
 8000970:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	0199      	lsls	r1, r3, #6
 8000976:	d41f      	bmi.n	80009b8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000978:	6a2b      	ldr	r3, [r5, #32]
 800097a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097e:	d105      	bne.n	800098c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000980:	6862      	ldr	r2, [r4, #4]
 8000982:	68a9      	ldr	r1, [r5, #8]
 8000984:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000988:	430a      	orrs	r2, r1
 800098a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800098c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800098e:	6862      	ldr	r2, [r4, #4]
 8000990:	430b      	orrs	r3, r1
 8000992:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000996:	4313      	orrs	r3, r2
 8000998:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800099a:	2301      	movs	r3, #1
 800099c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800099e:	f7ff fc1f 	bl	80001e0 <HAL_GetTick>
 80009a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	019a      	lsls	r2, r3, #6
 80009a8:	f53f aea7 	bmi.w	80006fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ac:	f7ff fc18 	bl	80001e0 <HAL_GetTick>
 80009b0:	1b40      	subs	r0, r0, r5
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9f6      	bls.n	80009a4 <HAL_RCC_OscConfig+0x2d4>
 80009b6:	e6cd      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b8:	f7ff fc12 	bl	80001e0 <HAL_GetTick>
 80009bc:	1bc0      	subs	r0, r0, r7
 80009be:	2802      	cmp	r0, #2
 80009c0:	d9d7      	bls.n	8000972 <HAL_RCC_OscConfig+0x2a2>
 80009c2:	e6c7      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80009c4:	f7ff fc0c 	bl	80001e0 <HAL_GetTick>
 80009c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	019b      	lsls	r3, r3, #6
 80009ce:	f57f ae94 	bpl.w	80006fa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009d2:	f7ff fc05 	bl	80001e0 <HAL_GetTick>
 80009d6:	1b40      	subs	r0, r0, r5
 80009d8:	2802      	cmp	r0, #2
 80009da:	d9f6      	bls.n	80009ca <HAL_RCC_OscConfig+0x2fa>
 80009dc:	e6ba      	b.n	8000754 <HAL_RCC_OscConfig+0x84>
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	42420060 	.word	0x42420060

080009e8 <HAL_RCC_GetSysClockFreq>:
{
 80009e8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80009ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009ee:	ac02      	add	r4, sp, #8
 80009f0:	f103 0510 	add.w	r5, r3, #16
 80009f4:	4622      	mov	r2, r4
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	6859      	ldr	r1, [r3, #4]
 80009fa:	3308      	adds	r3, #8
 80009fc:	c203      	stmia	r2!, {r0, r1}
 80009fe:	42ab      	cmp	r3, r5
 8000a00:	4614      	mov	r4, r2
 8000a02:	d1f7      	bne.n	80009f4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a04:	2301      	movs	r3, #1
 8000a06:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a0a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000a0c:	4911      	ldr	r1, [pc, #68]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a0e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a12:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a14:	f003 020c 	and.w	r2, r3, #12
 8000a18:	2a08      	cmp	r2, #8
 8000a1a:	d117      	bne.n	8000a4c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a1c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a20:	a806      	add	r0, sp, #24
 8000a22:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a24:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a26:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a2a:	d50c      	bpl.n	8000a46 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a2c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a30:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a34:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a36:	aa06      	add	r2, sp, #24
 8000a38:	4413      	add	r3, r2
 8000a3a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a3e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a42:	b007      	add	sp, #28
 8000a44:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_RCC_GetSysClockFreq+0x74>)
 8000a48:	4350      	muls	r0, r2
 8000a4a:	e7fa      	b.n	8000a42 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000a4e:	e7f8      	b.n	8000a42 <HAL_RCC_GetSysClockFreq+0x5a>
 8000a50:	08001688 	.word	0x08001688
 8000a54:	40021000 	.word	0x40021000
 8000a58:	007a1200 	.word	0x007a1200
 8000a5c:	003d0900 	.word	0x003d0900

08000a60 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a60:	4a54      	ldr	r2, [pc, #336]	; (8000bb4 <HAL_RCC_ClockConfig+0x154>)
{
 8000a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a66:	6813      	ldr	r3, [r2, #0]
{
 8000a68:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	428b      	cmp	r3, r1
{
 8000a70:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a72:	d32a      	bcc.n	8000aca <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a74:	6829      	ldr	r1, [r5, #0]
 8000a76:	078c      	lsls	r4, r1, #30
 8000a78:	d434      	bmi.n	8000ae4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a7a:	07ca      	lsls	r2, r1, #31
 8000a7c:	d447      	bmi.n	8000b0e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a7e:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <HAL_RCC_ClockConfig+0x154>)
 8000a80:	6813      	ldr	r3, [r2, #0]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	429e      	cmp	r6, r3
 8000a88:	f0c0 8082 	bcc.w	8000b90 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a8c:	682a      	ldr	r2, [r5, #0]
 8000a8e:	4c4a      	ldr	r4, [pc, #296]	; (8000bb8 <HAL_RCC_ClockConfig+0x158>)
 8000a90:	f012 0f04 	tst.w	r2, #4
 8000a94:	f040 8087 	bne.w	8000ba6 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a98:	0713      	lsls	r3, r2, #28
 8000a9a:	d506      	bpl.n	8000aaa <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a9c:	6863      	ldr	r3, [r4, #4]
 8000a9e:	692a      	ldr	r2, [r5, #16]
 8000aa0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000aa4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000aa8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000aaa:	f7ff ff9d 	bl	80009e8 <HAL_RCC_GetSysClockFreq>
 8000aae:	6863      	ldr	r3, [r4, #4]
 8000ab0:	4a42      	ldr	r2, [pc, #264]	; (8000bbc <HAL_RCC_ClockConfig+0x15c>)
 8000ab2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	40d8      	lsrs	r0, r3
 8000aba:	4b41      	ldr	r3, [pc, #260]	; (8000bc0 <HAL_RCC_ClockConfig+0x160>)
 8000abc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fb4c 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000ac4:	2000      	movs	r0, #0
}
 8000ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	f023 0307 	bic.w	r3, r3, #7
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ad4:	6813      	ldr	r3, [r2, #0]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d0ca      	beq.n	8000a74 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ae4:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ae6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000aea:	bf1e      	ittt	ne
 8000aec:	685a      	ldrne	r2, [r3, #4]
 8000aee:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000af2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000af6:	bf42      	ittt	mi
 8000af8:	685a      	ldrmi	r2, [r3, #4]
 8000afa:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000afe:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	68a8      	ldr	r0, [r5, #8]
 8000b04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b08:	4302      	orrs	r2, r0
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	e7b5      	b.n	8000a7a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b0e:	686a      	ldr	r2, [r5, #4]
 8000b10:	4c29      	ldr	r4, [pc, #164]	; (8000bb8 <HAL_RCC_ClockConfig+0x158>)
 8000b12:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b14:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b16:	d11c      	bne.n	8000b52 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b1c:	d0df      	beq.n	8000ade <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b1e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b24:	f023 0303 	bic.w	r3, r3, #3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000b2c:	f7ff fb58 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b30:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b32:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d114      	bne.n	8000b62 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d09d      	beq.n	8000a7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b42:	f7ff fb4d 	bl	80001e0 <HAL_GetTick>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	4540      	cmp	r0, r8
 8000b4a:	d9f5      	bls.n	8000b38 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b52:	2a02      	cmp	r2, #2
 8000b54:	d102      	bne.n	8000b5c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b5a:	e7df      	b.n	8000b1c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5c:	f013 0f02 	tst.w	r3, #2
 8000b60:	e7dc      	b.n	8000b1c <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d10f      	bne.n	8000b86 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b66:	6863      	ldr	r3, [r4, #4]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d086      	beq.n	8000a7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b70:	f7ff fb36 	bl	80001e0 <HAL_GetTick>
 8000b74:	1bc0      	subs	r0, r0, r7
 8000b76:	4540      	cmp	r0, r8
 8000b78:	d9f5      	bls.n	8000b66 <HAL_RCC_ClockConfig+0x106>
 8000b7a:	e7e7      	b.n	8000b4c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7c:	f7ff fb30 	bl	80001e0 <HAL_GetTick>
 8000b80:	1bc0      	subs	r0, r0, r7
 8000b82:	4540      	cmp	r0, r8
 8000b84:	d8e2      	bhi.n	8000b4c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b86:	6863      	ldr	r3, [r4, #4]
 8000b88:	f013 0f0c 	tst.w	r3, #12
 8000b8c:	d1f6      	bne.n	8000b7c <HAL_RCC_ClockConfig+0x11c>
 8000b8e:	e776      	b.n	8000a7e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f023 0307 	bic.w	r3, r3, #7
 8000b96:	4333      	orrs	r3, r6
 8000b98:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	429e      	cmp	r6, r3
 8000ba2:	d19c      	bne.n	8000ade <HAL_RCC_ClockConfig+0x7e>
 8000ba4:	e772      	b.n	8000a8c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ba6:	6863      	ldr	r3, [r4, #4]
 8000ba8:	68e9      	ldr	r1, [r5, #12]
 8000baa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	6063      	str	r3, [r4, #4]
 8000bb2:	e771      	b.n	8000a98 <HAL_RCC_ClockConfig+0x38>
 8000bb4:	40022000 	.word	0x40022000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	080016b6 	.word	0x080016b6
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000bd2:	6810      	ldr	r0, [r2, #0]
}    
 8000bd4:	40d8      	lsrs	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	080016c6 	.word	0x080016c6
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000bee:	5cd3      	ldrb	r3, [r2, r3]
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000bf2:	6810      	ldr	r0, [r2, #0]
} 
 8000bf4:	40d8      	lsrs	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	080016c6 	.word	0x080016c6
 8000c00:	20000008 	.word	0x20000008

08000c04 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000c04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000c08:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	f04f 0302 	mov.w	r3, #2
 8000c10:	d01c      	beq.n	8000c4c <HAL_TIM_ConfigClockSource+0x48>
 8000c12:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000c14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000c18:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000c1a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000c1e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c20:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000c24:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000c2a:	680a      	ldr	r2, [r1, #0]
 8000c2c:	2a40      	cmp	r2, #64	; 0x40
 8000c2e:	d079      	beq.n	8000d24 <HAL_TIM_ConfigClockSource+0x120>
 8000c30:	d819      	bhi.n	8000c66 <HAL_TIM_ConfigClockSource+0x62>
 8000c32:	2a10      	cmp	r2, #16
 8000c34:	f000 8093 	beq.w	8000d5e <HAL_TIM_ConfigClockSource+0x15a>
 8000c38:	d80a      	bhi.n	8000c50 <HAL_TIM_ConfigClockSource+0x4c>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f000 8089 	beq.w	8000d52 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000c46:	2300      	movs	r3, #0
 8000c48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000c4c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000c50:	2a20      	cmp	r2, #32
 8000c52:	f000 808a 	beq.w	8000d6a <HAL_TIM_ConfigClockSource+0x166>
 8000c56:	2a30      	cmp	r2, #48	; 0x30
 8000c58:	d1f2      	bne.n	8000c40 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c5a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c60:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000c64:	e036      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000c66:	2a70      	cmp	r2, #112	; 0x70
 8000c68:	d036      	beq.n	8000cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8000c6a:	d81b      	bhi.n	8000ca4 <HAL_TIM_ConfigClockSource+0xa0>
 8000c6c:	2a50      	cmp	r2, #80	; 0x50
 8000c6e:	d042      	beq.n	8000cf6 <HAL_TIM_ConfigClockSource+0xf2>
 8000c70:	2a60      	cmp	r2, #96	; 0x60
 8000c72:	d1e5      	bne.n	8000c40 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c74:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000c76:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c78:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000c7c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c7e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c80:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000c82:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000c84:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000c88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000c8c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000c90:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000c94:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c96:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c98:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c9e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000ca2:	e017      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000ca4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ca8:	d011      	beq.n	8000cce <HAL_TIM_ConfigClockSource+0xca>
 8000caa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000cae:	d1c7      	bne.n	8000c40 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000cb0:	688a      	ldr	r2, [r1, #8]
 8000cb2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000cb4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000cb6:	68c9      	ldr	r1, [r1, #12]
 8000cb8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000cba:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000cbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cc2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000cc4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ccc:	e002      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	e7b3      	b.n	8000c40 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000cd8:	688a      	ldr	r2, [r1, #8]
 8000cda:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000cdc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000cde:	68c9      	ldr	r1, [r1, #12]
 8000ce0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ce2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ce6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cea:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000cec:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000cee:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000cf0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000cf4:	e7ee      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000cf6:	684c      	ldr	r4, [r1, #4]
 8000cf8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000cfa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cfc:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000cfe:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d02:	f025 0501 	bic.w	r5, r5, #1
 8000d06:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d08:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000d0a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d10:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d16:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000d18:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d1e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000d22:	e7d7      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d24:	684c      	ldr	r4, [r1, #4]
 8000d26:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d28:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d2a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d2c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d30:	f025 0501 	bic.w	r5, r5, #1
 8000d34:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d36:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000d38:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d3e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d44:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000d46:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d4c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000d50:	e7c0      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000d52:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d58:	f042 0207 	orr.w	r2, r2, #7
 8000d5c:	e7ba      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000d5e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d64:	f042 0217 	orr.w	r2, r2, #23
 8000d68:	e7b4      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000d6a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d70:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000d74:	e7ae      	b.n	8000cd4 <HAL_TIM_ConfigClockSource+0xd0>
	...

08000d78 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d78:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000d7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d00a      	beq.n	8000d96 <TIM_Base_SetConfig+0x1e>
 8000d80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d84:	d007      	beq.n	8000d96 <TIM_Base_SetConfig+0x1e>
 8000d86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d003      	beq.n	8000d96 <TIM_Base_SetConfig+0x1e>
 8000d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d92:	4290      	cmp	r0, r2
 8000d94:	d115      	bne.n	8000dc2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000d96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d9c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <TIM_Base_SetConfig+0x6c>)
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d00a      	beq.n	8000dba <TIM_Base_SetConfig+0x42>
 8000da4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000da8:	d007      	beq.n	8000dba <TIM_Base_SetConfig+0x42>
 8000daa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d003      	beq.n	8000dba <TIM_Base_SetConfig+0x42>
 8000db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d103      	bne.n	8000dc2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dc0:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000dc2:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000dc8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000dca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000dcc:	688b      	ldr	r3, [r1, #8]
 8000dce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000dd0:	680b      	ldr	r3, [r1, #0]
 8000dd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <TIM_Base_SetConfig+0x6c>)
 8000dd6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000dd8:	bf04      	itt	eq
 8000dda:	690b      	ldreq	r3, [r1, #16]
 8000ddc:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000dde:	2301      	movs	r3, #1
 8000de0:	6143      	str	r3, [r0, #20]
 8000de2:	4770      	bx	lr
 8000de4:	40012c00 	.word	0x40012c00

08000de8 <HAL_TIM_Base_Init>:
{
 8000de8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000dea:	4604      	mov	r4, r0
 8000dec:	b1a0      	cbz	r0, 8000e18 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000df6:	b91b      	cbnz	r3, 8000e00 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000df8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000dfc:	f000 fb46 	bl	800148c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000e00:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e02:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e08:	1d21      	adds	r1, r4, #4
 8000e0a:	f7ff ffb5 	bl	8000d78 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000e0e:	2301      	movs	r3, #1
  return HAL_OK;
 8000e10:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000e12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000e16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e18:	2001      	movs	r0, #1
}
 8000e1a:	bd10      	pop	{r4, pc}

08000e1c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000e1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000e20:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	f04f 0302 	mov.w	r3, #2
 8000e28:	d018      	beq.n	8000e5c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e2e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e30:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e32:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e34:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e3a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	4322      	orrs	r2, r4
 8000e40:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e48:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000e56:	2300      	movs	r3, #0
 8000e58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000e5c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000e5e:	bd10      	pop	{r4, pc}

08000e60 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e60:	6803      	ldr	r3, [r0, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000e68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000e72:	2320      	movs	r3, #32
 8000e74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000e78:	4770      	bx	lr
	...

08000e7c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e80:	6805      	ldr	r5, [r0, #0]
 8000e82:	68c2      	ldr	r2, [r0, #12]
 8000e84:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e86:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e90:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000e92:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e94:	430b      	orrs	r3, r1
 8000e96:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000e98:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000e9c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ea0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ea6:	696b      	ldr	r3, [r5, #20]
 8000ea8:	6982      	ldr	r2, [r0, #24]
 8000eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <UART_SetConfig+0x138>)
{
 8000eb4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000eb6:	429d      	cmp	r5, r3
 8000eb8:	f04f 0419 	mov.w	r4, #25
 8000ebc:	d146      	bne.n	8000f4c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ebe:	f7ff fe91 	bl	8000be4 <HAL_RCC_GetPCLK2Freq>
 8000ec2:	fb04 f300 	mul.w	r3, r4, r0
 8000ec6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000eca:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ece:	00b6      	lsls	r6, r6, #2
 8000ed0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ed4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ed8:	011e      	lsls	r6, r3, #4
 8000eda:	f7ff fe83 	bl	8000be4 <HAL_RCC_GetPCLK2Freq>
 8000ede:	4360      	muls	r0, r4
 8000ee0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000eea:	f7ff fe7b 	bl	8000be4 <HAL_RCC_GetPCLK2Freq>
 8000eee:	4360      	muls	r0, r4
 8000ef0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000efa:	fbb3 f3f8 	udiv	r3, r3, r8
 8000efe:	fb08 7313 	mls	r3, r8, r3, r7
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	3332      	adds	r3, #50	; 0x32
 8000f06:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f0a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f0e:	f7ff fe69 	bl	8000be4 <HAL_RCC_GetPCLK2Freq>
 8000f12:	4360      	muls	r0, r4
 8000f14:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	fbb0 faf2 	udiv	sl, r0, r2
 8000f1e:	f7ff fe61 	bl	8000be4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f22:	4360      	muls	r0, r4
 8000f24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f32:	fb08 a313 	mls	r3, r8, r3, sl
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	3332      	adds	r3, #50	; 0x32
 8000f3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	433b      	orrs	r3, r7
 8000f44:	4433      	add	r3, r6
 8000f46:	60ab      	str	r3, [r5, #8]
 8000f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4c:	f7ff fe3a 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
 8000f50:	fb04 f300 	mul.w	r3, r4, r0
 8000f54:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f58:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f5c:	00b6      	lsls	r6, r6, #2
 8000f5e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f62:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f66:	011e      	lsls	r6, r3, #4
 8000f68:	f7ff fe2c 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
 8000f6c:	4360      	muls	r0, r4
 8000f6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f78:	f7ff fe24 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
 8000f7c:	4360      	muls	r0, r4
 8000f7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f88:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f8c:	fb08 7313 	mls	r3, r8, r3, r7
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	3332      	adds	r3, #50	; 0x32
 8000f94:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f98:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f9c:	f7ff fe12 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
 8000fa0:	4360      	muls	r0, r4
 8000fa2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	fbb0 faf2 	udiv	sl, r0, r2
 8000fac:	f7ff fe0a 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
 8000fb0:	e7b7      	b.n	8000f22 <UART_SetConfig+0xa6>
 8000fb2:	bf00      	nop
 8000fb4:	40013800 	.word	0x40013800

08000fb8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460e      	mov	r6, r1
 8000fbe:	4617      	mov	r7, r2
 8000fc0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000fc2:	6821      	ldr	r1, [r4, #0]
 8000fc4:	680b      	ldr	r3, [r1, #0]
 8000fc6:	ea36 0303 	bics.w	r3, r6, r3
 8000fca:	d101      	bne.n	8000fd0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000fcc:	2000      	movs	r0, #0
}
 8000fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000fd0:	1c6b      	adds	r3, r5, #1
 8000fd2:	d0f7      	beq.n	8000fc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fd4:	b995      	cbnz	r5, 8000ffc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fd6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000fd8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000fe0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000fea:	2320      	movs	r3, #32
 8000fec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000ff0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ffc:	f7ff f8f0 	bl	80001e0 <HAL_GetTick>
 8001000:	1bc0      	subs	r0, r0, r7
 8001002:	4285      	cmp	r5, r0
 8001004:	d2dd      	bcs.n	8000fc2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001006:	e7e6      	b.n	8000fd6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001008 <HAL_UART_Init>:
{
 8001008:	b510      	push	{r4, lr}
  if(huart == NULL)
 800100a:	4604      	mov	r4, r0
 800100c:	b340      	cbz	r0, 8001060 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800100e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001016:	b91b      	cbnz	r3, 8001020 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001018:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800101c:	f000 fa4a 	bl	80014b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001020:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001022:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001024:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001028:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800102a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800102c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001030:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001032:	f7ff ff23 	bl	8000e7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001036:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001038:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001048:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001050:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001052:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001054:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001056:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800105a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800105e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001060:	2001      	movs	r0, #1
}
 8001062:	bd10      	pop	{r4, pc}

08001064 <HAL_UART_Transmit>:
{
 8001064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001068:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800106a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800106e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001070:	2b20      	cmp	r3, #32
{
 8001072:	460d      	mov	r5, r1
 8001074:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001076:	d14e      	bne.n	8001116 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001078:	2900      	cmp	r1, #0
 800107a:	d049      	beq.n	8001110 <HAL_UART_Transmit+0xac>
 800107c:	2a00      	cmp	r2, #0
 800107e:	d047      	beq.n	8001110 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001080:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001084:	2b01      	cmp	r3, #1
 8001086:	d046      	beq.n	8001116 <HAL_UART_Transmit+0xb2>
 8001088:	2301      	movs	r3, #1
 800108a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001092:	2321      	movs	r3, #33	; 0x21
 8001094:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001098:	f7ff f8a2 	bl	80001e0 <HAL_GetTick>
 800109c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800109e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80010a2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80010a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b96b      	cbnz	r3, 80010c8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4632      	mov	r2, r6
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff ff80 	bl	8000fb8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010b8:	b9a8      	cbnz	r0, 80010e6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80010ba:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80010bc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80010c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80010c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010ca:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010d2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010d4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010da:	4620      	mov	r0, r4
 80010dc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010de:	d10e      	bne.n	80010fe <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010e0:	f7ff ff6a 	bl	8000fb8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010e4:	b110      	cbz	r0, 80010ec <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80010e6:	2003      	movs	r0, #3
 80010e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80010ec:	882b      	ldrh	r3, [r5, #0]
 80010ee:	6822      	ldr	r2, [r4, #0]
 80010f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010f4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010f6:	6923      	ldr	r3, [r4, #16]
 80010f8:	b943      	cbnz	r3, 800110c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80010fa:	3502      	adds	r5, #2
 80010fc:	e7d3      	b.n	80010a6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010fe:	f7ff ff5b 	bl	8000fb8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001102:	2800      	cmp	r0, #0
 8001104:	d1ef      	bne.n	80010e6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	782a      	ldrb	r2, [r5, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	3501      	adds	r5, #1
 800110e:	e7ca      	b.n	80010a6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001110:	2001      	movs	r0, #1
 8001112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001116:	2002      	movs	r0, #2
}
 8001118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800111c <HAL_UART_Receive_DMA>:
{
 800111c:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 800111e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8001122:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001124:	2a20      	cmp	r2, #32
{
 8001126:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001128:	d138      	bne.n	800119c <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 800112a:	2900      	cmp	r1, #0
 800112c:	d034      	beq.n	8001198 <HAL_UART_Receive_DMA+0x7c>
 800112e:	2b00      	cmp	r3, #0
 8001130:	d032      	beq.n	8001198 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8001132:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001136:	2a01      	cmp	r2, #1
 8001138:	d030      	beq.n	800119c <HAL_UART_Receive_DMA+0x80>
 800113a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800113c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 800113e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001142:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8001144:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001146:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001148:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800114a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800114e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001152:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001154:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 8001158:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800115a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <HAL_UART_Receive_DMA+0x8c>)
 800115e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001160:	460a      	mov	r2, r1
 8001162:	1d31      	adds	r1, r6, #4
 8001164:	f7ff f8ec 	bl	8000340 <HAL_DMA_Start_IT>
    return HAL_OK;
 8001168:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	9401      	str	r4, [sp, #4]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	9201      	str	r2, [sp, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8001174:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001178:	9201      	str	r2, [sp, #4]
 800117a:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001182:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001192:	615a      	str	r2, [r3, #20]
}
 8001194:	b002      	add	sp, #8
 8001196:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001198:	2001      	movs	r0, #1
 800119a:	e7fb      	b.n	8001194 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 800119c:	2002      	movs	r0, #2
 800119e:	e7f9      	b.n	8001194 <HAL_UART_Receive_DMA+0x78>
 80011a0:	080011ad 	.word	0x080011ad
 80011a4:	080011e7 	.word	0x080011e7
 80011a8:	080011f3 	.word	0x080011f3

080011ac <UART_DMAReceiveCplt>:
{
 80011ac:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ae:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f013 0320 	ands.w	r3, r3, #32
 80011b8:	d110      	bne.n	80011dc <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 80011ba:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80011bc:	6813      	ldr	r3, [r2, #0]
 80011be:	68d9      	ldr	r1, [r3, #12]
 80011c0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80011c4:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011c6:	6959      	ldr	r1, [r3, #20]
 80011c8:	f021 0101 	bic.w	r1, r1, #1
 80011cc:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011ce:	6959      	ldr	r1, [r3, #20]
 80011d0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80011d4:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80011d6:	2320      	movs	r3, #32
 80011d8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80011dc:	4610      	mov	r0, r2
 80011de:	f000 f929 	bl	8001434 <HAL_UART_RxCpltCallback>
 80011e2:	bd08      	pop	{r3, pc}

080011e4 <HAL_UART_RxHalfCpltCallback>:
 80011e4:	4770      	bx	lr

080011e6 <UART_DMARxHalfCplt>:
{
 80011e6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80011e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80011ea:	f7ff fffb 	bl	80011e4 <HAL_UART_RxHalfCpltCallback>
 80011ee:	bd08      	pop	{r3, pc}

080011f0 <HAL_UART_ErrorCallback>:
 80011f0:	4770      	bx	lr

080011f2 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011f2:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 80011f4:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80011f6:	680b      	ldr	r3, [r1, #0]
 80011f8:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80011fa:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80011fe:	2821      	cmp	r0, #33	; 0x21
 8001200:	d10a      	bne.n	8001218 <UART_DMAError+0x26>
 8001202:	0612      	lsls	r2, r2, #24
 8001204:	d508      	bpl.n	8001218 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8001206:	2200      	movs	r2, #0
 8001208:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001210:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001212:	2220      	movs	r2, #32
 8001214:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001218:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800121a:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800121e:	2a22      	cmp	r2, #34	; 0x22
 8001220:	d106      	bne.n	8001230 <UART_DMAError+0x3e>
 8001222:	065b      	lsls	r3, r3, #25
 8001224:	d504      	bpl.n	8001230 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8001226:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8001228:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800122a:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800122c:	f7ff fe18 	bl	8000e60 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001230:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001232:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800123a:	f7ff ffd9 	bl	80011f0 <HAL_UART_ErrorCallback>
 800123e:	bd08      	pop	{r3, pc}

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b500      	push	{lr}
 8001242:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001244:	2228      	movs	r2, #40	; 0x28
 8001246:	2100      	movs	r1, #0
 8001248:	a806      	add	r0, sp, #24
 800124a:	f000 fa09 	bl	8001660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124e:	2214      	movs	r2, #20
 8001250:	2100      	movs	r1, #0
 8001252:	a801      	add	r0, sp, #4
 8001254:	f000 fa04 	bl	8001660 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001264:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001266:	f7ff fa33 	bl	80006d0 <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800126a:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001272:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001276:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001278:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800127a:	f7ff fbf1 	bl	8000a60 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800127e:	b011      	add	sp, #68	; 0x44
 8001280:	f85d fb04 	ldr.w	pc, [sp], #4

08001284 <main>:
{
 8001284:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	4d61      	ldr	r5, [pc, #388]	; (800140c <main+0x188>)
{
 8001288:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 800128a:	f7fe ff8b 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800128e:	f7ff ffd7 	bl	8001240 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	2210      	movs	r2, #16
 8001294:	2100      	movs	r1, #0
 8001296:	a808      	add	r0, sp, #32
 8001298:	f000 f9e2 	bl	8001660 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	61ab      	str	r3, [r5, #24]
 80012a6:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012b6:	4856      	ldr	r0, [pc, #344]	; (8001410 <main+0x18c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	61ab      	str	r3, [r5, #24]
 80012be:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	9303      	str	r3, [sp, #12]
 80012c8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	61ab      	str	r3, [r5, #24]
 80012d4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	9304      	str	r3, [sp, #16]
 80012de:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012e0:	f7ff f9e0 	bl	80006a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ea:	484a      	ldr	r0, [pc, #296]	; (8001414 <main+0x190>)
 80012ec:	f7ff f9da 	bl	80006a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 80012f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012f4:	a908      	add	r1, sp, #32
 80012f6:	4846      	ldr	r0, [pc, #280]	; (8001410 <main+0x18c>)
  GPIO_InitStruct.Pin = LED_Pin;
 80012f8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001300:	f7ff f8f0 	bl	80004e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001304:	4b44      	ldr	r3, [pc, #272]	; (8001418 <main+0x194>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	a908      	add	r1, sp, #32
 8001308:	4844      	ldr	r0, [pc, #272]	; (800141c <main+0x198>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f7ff f8e8 	bl	80004e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001314:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001318:	a908      	add	r1, sp, #32
 800131a:	483e      	ldr	r0, [pc, #248]	; (8001414 <main+0x190>)
  GPIO_InitStruct.Pin = LED2_Pin;
 800131c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001324:	f7ff f8de 	bl	80004e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001328:	4622      	mov	r2, r4
 800132a:	4621      	mov	r1, r4
 800132c:	2006      	movs	r0, #6
 800132e:	f7fe ff81 	bl	8000234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001332:	2006      	movs	r0, #6
 8001334:	f7fe ffb2 	bl	800029c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001338:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800133a:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133c:	4333      	orrs	r3, r6
 800133e:	616b      	str	r3, [r5, #20]
 8001340:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001342:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001344:	4033      	ands	r3, r6
 8001346:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001348:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800134c:	f7fe ff72 	bl	8000234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001350:	2010      	movs	r0, #16
 8001352:	f7fe ffa3 	bl	800029c <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	4621      	mov	r1, r4
 8001358:	2210      	movs	r2, #16
 800135a:	a808      	add	r0, sp, #32
 800135c:	f000 f980 	bl	8001660 <memset>
  htim3.Init.Prescaler = 8000;
 8001360:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  htim3.Instance = TIM3;
 8001364:	4d2e      	ldr	r5, [pc, #184]	; (8001420 <main+0x19c>)
  htim3.Init.Prescaler = 8000;
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <main+0x1a0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001368:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 8000;
 800136a:	e885 000c 	stmia.w	r5, {r2, r3}
  htim3.Init.Period = 1000;
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 1000;
 8001374:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137a:	9405      	str	r4, [sp, #20]
 800137c:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800137e:	f7ff fd33 	bl	8000de8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001386:	a908      	add	r1, sp, #32
 8001388:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138a:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138c:	f7ff fc3a 	bl	8000c04 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001390:	a905      	add	r1, sp, #20
 8001392:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001398:	f7ff fd40 	bl	8000e1c <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 115200;
 800139c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80013a0:	4d21      	ldr	r5, [pc, #132]	; (8001428 <main+0x1a4>)
  huart2.Init.BaudRate = 115200;
 80013a2:	4922      	ldr	r1, [pc, #136]	; (800142c <main+0x1a8>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a4:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 80013a6:	e885 000a 	stmia.w	r5, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013aa:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ac:	60ac      	str	r4, [r5, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ae:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b0:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b2:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b4:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b6:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b8:	f7ff fe26 	bl	8001008 <HAL_UART_Init>
  char txData[30] = "Hello World";
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <main+0x1ac>)
 80013be:	ab08      	add	r3, sp, #32
 80013c0:	6810      	ldr	r0, [r2, #0]
 80013c2:	6851      	ldr	r1, [r2, #4]
 80013c4:	c303      	stmia	r3!, {r0, r1}
 80013c6:	6890      	ldr	r0, [r2, #8]
 80013c8:	4621      	mov	r1, r4
 80013ca:	6018      	str	r0, [r3, #0]
 80013cc:	2212      	movs	r2, #18
 80013ce:	a80b      	add	r0, sp, #44	; 0x2c
 80013d0:	f000 f946 	bl	8001660 <memset>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxData, 10);
 80013d4:	220a      	movs	r2, #10
 80013d6:	a905      	add	r1, sp, #20
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff fe9f 	bl	800111c <HAL_UART_Receive_DMA>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013de:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80013e2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	HAL_UART_Transmit(&huart2, (uint8_t *)txData, strlen(txData), 10);
 80013e6:	a808      	add	r0, sp, #32
 80013e8:	f7fe feb0 	bl	800014c <strlen>
 80013ec:	230a      	movs	r3, #10
 80013ee:	b282      	uxth	r2, r0
 80013f0:	a908      	add	r1, sp, #32
 80013f2:	4628      	mov	r0, r5
 80013f4:	f7ff fe36 	bl	8001064 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013f8:	4620      	mov	r0, r4
 80013fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fe:	f7ff f956 	bl	80006ae <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8001402:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001406:	f7fe fef1 	bl	80001ec <HAL_Delay>
 800140a:	e7ec      	b.n	80013e6 <main+0x162>
 800140c:	40021000 	.word	0x40021000
 8001410:	40011000 	.word	0x40011000
 8001414:	40010c00 	.word	0x40010c00
 8001418:	10110000 	.word	0x10110000
 800141c:	40010800 	.word	0x40010800
 8001420:	20000070 	.word	0x20000070
 8001424:	40000400 	.word	0x40000400
 8001428:	200000b0 	.word	0x200000b0
 800142c:	40004400 	.word	0x40004400
 8001430:	08001698 	.word	0x08001698

08001434 <HAL_UART_RxCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	4801      	ldr	r0, [pc, #4]	; (8001440 <HAL_UART_RxCpltCallback+0xc>)
 800143a:	f7ff b938 	b.w	80006ae <HAL_GPIO_TogglePin>
 800143e:	bf00      	nop
 8001440:	40010c00 	.word	0x40010c00

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	4770      	bx	lr
	...

08001448 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_MspInit+0x3c>)
{
 800144a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	f002 0201 	and.w	r2, r2, #1
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	69da      	ldr	r2, [r3, #28]
 8001460:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001464:	61da      	str	r2, [r3, #28]
 8001466:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001472:	6853      	ldr	r3, [r2, #4]
 8001474:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800147c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	b002      	add	sp, #8
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM3)
 800148c:	6802      	ldr	r2, [r0, #0]
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_TIM_Base_MspInit+0x24>)
{
 8001490:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001492:	429a      	cmp	r2, r3
 8001494:	d10a      	bne.n	80014ac <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001496:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	f042 0202 	orr.w	r2, r2, #2
 80014a0:	61da      	str	r2, [r3, #28]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ac:	b002      	add	sp, #8
 80014ae:	4770      	bx	lr
 80014b0:	40000400 	.word	0x40000400

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	4606      	mov	r6, r0
 80014b8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	2210      	movs	r2, #16
 80014bc:	2100      	movs	r1, #0
 80014be:	a802      	add	r0, sp, #8
 80014c0:	f000 f8ce 	bl	8001660 <memset>
  if(huart->Instance==USART2)
 80014c4:	6832      	ldr	r2, [r6, #0]
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_UART_MspInit+0x94>)
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d13b      	bne.n	8001544 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014cc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80014d0:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014d8:	61da      	str	r2, [r3, #28]
 80014da:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	481b      	ldr	r0, [pc, #108]	; (800154c <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	f042 0204 	orr.w	r2, r2, #4
 80014ee:	619a      	str	r2, [r3, #24]
 80014f0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80014f2:	4c17      	ldr	r4, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fc:	2304      	movs	r3, #4
 80014fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f7fe ffec 	bl	80004e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800150c:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	480f      	ldr	r0, [pc, #60]	; (800154c <HAL_UART_MspInit+0x98>)
 8001510:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001514:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f7fe ffe3 	bl	80004e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_UART_MspInit+0xa0>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001520:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001522:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800152a:	2320      	movs	r3, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152e:	6125      	str	r5, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001530:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001532:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001534:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001536:	f7fe fed3 	bl	80002e0 <HAL_DMA_Init>
 800153a:	b108      	cbz	r0, 8001540 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 800153c:	f7ff ff82 	bl	8001444 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001540:	6374      	str	r4, [r6, #52]	; 0x34
 8001542:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001544:	b006      	add	sp, #24
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	40004400 	.word	0x40004400
 800154c:	40010800 	.word	0x40010800
 8001550:	2000002c 	.word	0x2000002c
 8001554:	4002006c 	.word	0x4002006c

08001558 <NMI_Handler>:
 8001558:	4770      	bx	lr

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	e7fe      	b.n	800155a <HardFault_Handler>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	e7fe      	b.n	800155c <MemManage_Handler>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	e7fe      	b.n	800155e <BusFault_Handler>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler>

08001562 <SVC_Handler>:
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f7fe be2e 	b.w	80001c8 <HAL_IncTick>

0800156c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff b8a3 	b.w	80006b8 <HAL_GPIO_EXTI_IRQHandler>
	...

08001574 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001574:	4801      	ldr	r0, [pc, #4]	; (800157c <DMA1_Channel6_IRQHandler+0x8>)
 8001576:	f7fe bf21 	b.w	80003bc <HAL_DMA_IRQHandler>
 800157a:	bf00      	nop
 800157c:	2000002c 	.word	0x2000002c

08001580 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <SystemInit+0x40>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <SystemInit+0x44>)
 800158e:	400a      	ands	r2, r1
 8001590:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001598:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800159c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015a4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80015ac:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <SystemInit+0x48>)
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	f8ff0000 	.word	0xf8ff0000
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ce:	e003      	b.n	80015d8 <LoopCopyDataInit>

080015d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015d6:	3104      	adds	r1, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015e0:	d3f6      	bcc.n	80015d0 <CopyDataInit>
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015e4:	e002      	b.n	80015ec <LoopFillZerobss>

080015e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015e8:	f842 3b04 	str.w	r3, [r2], #4

080015ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015f0:	d3f9      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015f2:	f7ff ffc5 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f000 f80f 	bl	8001618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fa:	f7ff fe43 	bl	8001284 <main>
  bx lr
 80015fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001600:	080016d8 	.word	0x080016d8
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001608:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800160c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001610:	200000f0 	.word	0x200000f0

08001614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC1_2_IRQHandler>
	...

08001618 <__libc_init_array>:
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	2500      	movs	r5, #0
 800161c:	4e0c      	ldr	r6, [pc, #48]	; (8001650 <__libc_init_array+0x38>)
 800161e:	4c0d      	ldr	r4, [pc, #52]	; (8001654 <__libc_init_array+0x3c>)
 8001620:	1ba4      	subs	r4, r4, r6
 8001622:	10a4      	asrs	r4, r4, #2
 8001624:	42a5      	cmp	r5, r4
 8001626:	d109      	bne.n	800163c <__libc_init_array+0x24>
 8001628:	f000 f822 	bl	8001670 <_init>
 800162c:	2500      	movs	r5, #0
 800162e:	4e0a      	ldr	r6, [pc, #40]	; (8001658 <__libc_init_array+0x40>)
 8001630:	4c0a      	ldr	r4, [pc, #40]	; (800165c <__libc_init_array+0x44>)
 8001632:	1ba4      	subs	r4, r4, r6
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	42a5      	cmp	r5, r4
 8001638:	d105      	bne.n	8001646 <__libc_init_array+0x2e>
 800163a:	bd70      	pop	{r4, r5, r6, pc}
 800163c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001640:	4798      	blx	r3
 8001642:	3501      	adds	r5, #1
 8001644:	e7ee      	b.n	8001624 <__libc_init_array+0xc>
 8001646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800164a:	4798      	blx	r3
 800164c:	3501      	adds	r5, #1
 800164e:	e7f2      	b.n	8001636 <__libc_init_array+0x1e>
 8001650:	080016d0 	.word	0x080016d0
 8001654:	080016d0 	.word	0x080016d0
 8001658:	080016d0 	.word	0x080016d0
 800165c:	080016d4 	.word	0x080016d4

08001660 <memset>:
 8001660:	4603      	mov	r3, r0
 8001662:	4402      	add	r2, r0
 8001664:	4293      	cmp	r3, r2
 8001666:	d100      	bne.n	800166a <memset+0xa>
 8001668:	4770      	bx	lr
 800166a:	f803 1b01 	strb.w	r1, [r3], #1
 800166e:	e7f9      	b.n	8001664 <memset+0x4>

08001670 <_init>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr

0800167c <_fini>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	bf00      	nop
 8001680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001682:	bc08      	pop	{r3}
 8001684:	469e      	mov	lr, r3
 8001686:	4770      	bx	lr
